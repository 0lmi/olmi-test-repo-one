# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Checount second repo
        uses: actions/checkout@master
        with:
          repository: 0lmi/olmi-test-repo-two
          path: olmi-test-repo-two

      - name: Export env var
        run: |
          echo "FOO=bar" >> $GITHUB_ENV

      - name: Check what is in the workspace
        run: |
          ls -l $GITHUB_WORKSPACE/*
          echo "FOO=${{ env.FOO }}"

      - name: Create a file
        run: |
          cd $GITHUB_WORKSPACE/olmi-test-repo-two
          echo "FOO=${{ env.FOO }}" > file_1

#       - name: GitHub Push
#         uses: Smart-Transportation/push@v1.3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           repository: 0lmi/olmi-test-repo-two
#           directory: olmi-test-repo-two
#           branch: main
      
      - name: Push to olmi-test-repo-two repo
        run: |
          ls -la ${HOME}
          
          mkdir ${HOME}/.ssh
          chmod 700 ${HOME}/.ssh
          echo $SSH_PRIVATE_KEY_GITHUB_ACCESS_TOKEN > ${HOME}/.ssh/id_rsa
          chmod 600 ${HOME}/.ssh/id_rsa
          
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          
          ls -la ${HOME}/.ssh
          

          cd $GITHUB_WORKSPACE/olmi-test-repo-two
          pwd 
          
          echo ${{ env.FOO }} > ./domain-name-1.txt
          git add .
          git config user.name "Alex Miliukov"
          git config user.email "a.milukov@gmail.com"
          git commit -am "File Replicated from olmi-test-repo-one"
          git log
          git remote -v
          export new_remote=$(git remote -v | grep origin | head -n1 | awk {'print $2'} | sed "s~https://~git@~g")
          git remote set-url origin $new_remote
          git remote -v
          git push origin
          
