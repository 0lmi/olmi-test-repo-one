name: Build and Deploy Mender Artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - uses: actions/checkout@v2      
      - name: Create Mender Artifact
        env:
          MENDER_ARTIFACT_NAME: artifact.mender
        run: |
          echo /home/root/.ssh > dest_dir
          echo authorized_keys > filename
          echo key > authorized_keys
          mender-artifact write module-image \
            -T single-file \
            --device-type raspberrypi4 \
            -o ${MENDER_ARTIFACT_NAME} \
            -n updated-authorized_keys-1.0 \
            --software-name authorized_keys \
            --software-version 1.0 \
            -f dest_dir \
            -f filename \
            -f authorized_keys
      - name: Upload Mender Artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: artifact.mender


  publish:
    needs: ["build"]
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - name: Download Mender Artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Get Auth Token
        env:
          MENDER_SERVER_URL: https://hosted.mender.io
        run: |
          if [ ! -z secrets.MENDER_SERVER_ACCESS_TOKEN ]; then
            MENDER_SERVER_ACCESS_TOKEN=${{ secrets.MENDER_SERVER_ACCESS_TOKEN }}
          elif [[ ! -z ${{ secrets.MENDER_SERVER_USER }} && ! -z ${{ secrets.MENDER_SERVER_PASSWORD }} ]]; then
            MENDER_SERVER_ACCESS_TOKEN=$(curl -s -X POST -u ${{ secrets.MENDER_SERVER_USER }}:${{ secrets.MENDER_SERVER_PASSWORD }} ${MENDER_SERVER_URL}/api/management/v1/useradm/auth/login)
          else
            echo "ERROR: Auth credentials are not provided"
            exit 1
          fi
          echo "MENDER_SERVER_ACCESS_TOKEN=${MENDER_SERVER_ACCESS_TOKEN}" >> ${GITHUB_ENV}
      - name: Upload Artifact to Mender Server
        env:
          MENDER_ARTIFACT_NAME: artifact.mender
          MENDER_SERVER_URL: https://hosted.mender.io
        run: |
          RELEASE_NAME=$(mender-artifact read --no-progress ${MENDER_ARTIFACT_NAME} | grep "Name:" | awk {'print $2'})
          if [ $(mender-cli artifacts list --server ${MENDER_SERVER_URL} --token-value ${MENDER_SERVER_ACCESS_TOKEN} | grep -c ${RELEASE_NAME}) -gt 0 ]; then
            echo "WARN: artifact ${MENDER_SERVER_URL} with name ${RELEASE_NAME} already exists on the server, upload is skipped"
            exit 0
          fi
          mender-cli artifacts upload --no-progress --server ${MENDER_SERVER_URL} --token-value ${MENDER_SERVER_ACCESS_TOKEN} ${MENDER_ARTIFACT_NAME}
          echo "INFO: artifact ${MENDER_ARTIFACT_NAME} (${RELEASE_NAME}) successfully uploaded to ${MENDER_SERVER_URL}"


  deploy:
    needs: ["publish"]
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - name: Download Mender Artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
      - name: Get Artifact Name
        env:
          MENDER_ARTIFACT_NAME: artifact.mender
        run: |
          ARTIFACT_NAME=$(mender-artifact read --no-progress ${MENDER_ARTIFACT_NAME} | grep "Name:" | awk {'print $2'})
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" | tee -a ${GITHUB_ENV}
      - name: Generate Deployment Name
        run: |
          CI_COMMIT_SHORT_SHA="${GITHUB_SHA:0:8}"
          DEPLOYMENT_NAME=${ARTIFACT_NAME}_${CI_COMMIT_SHORT_SHA}
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" | tee -a ${GITHUB_ENV}
      - name: Get Auth Token
        env:
          MENDER_SERVER_URL: https://hosted.mender.ioMENDE
        run: |
          if [ ! -z secrets.MENDER_SERVER_ACCESS_TOKEN ]; then
            MENDER_SERVER_ACCESS_TOKEN=${{ secrets.MENDER_SERVER_ACCESS_TOKEN }}
          elif [[ ! -z ${{ secrets.MENDER_SERVER_USER }} && ! -z ${{ secrets.MENDER_SERVER_PASSWORD }} ]]; then
            MENDER_SERVER_ACCESS_TOKEN=$(curl -s -X POST -u ${{ secrets.MENDER_SERVER_USER }}:${{ secrets.MENDER_SERVER_PASSWORD }} ${MENDER_SERVER_URL}/api/management/v1/useradm/auth/login)
          else
            echo "ERROR: Auth credentials are not provided"
            exit 1
          fi
          echo "MENDER_SERVER_ACCESS_TOKEN=${MENDER_SERVER_ACCESS_TOKEN}" >> ${GITHUB_ENV}
      - name: Get Group's Devices List
        env:
          MENDER_DEPLOYMENT_NAME: grp-1
          MENDER_SERVER_URL: https://hosted.mender.io
        run: |
          MENDER_DEVICES_LIST=$(curl -s -H "Authorization: Bearer ${MENDER_SERVER_ACCESS_TOKEN}" ${MENDER_SERVER_URL}/api/management/v1/inventory/groups/${MENDER_DEPLOYMENT_NAME}/devices)
          echo "MENDER_DEVICES_LIST=$MENDER_DEVICES_LIST" | tee -a ${GITHUB_ENV}
      - name: Create Deployment
        env:
          MENDER_SERVER_URL: https://hosted.mender.io
        run: |
          STATUS_CODE=$(curl -s -w "%{http_code}" \
            -X POST ${MENDER_SERVER_URL}/api/management/v1/deployments/deployments \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${MENDER_SERVER_ACCESS_TOKEN}" \
            --data-raw "{\"name\": \"${DEPLOYMENT_NAME}\", \"artifact_name\": \"${ARTIFACT_NAME}\", \"devices\": ${MENDER_DEVICES_LIST}}")
          if [ "${STATUS_CODE}" -eq 201 ]; then
            echo "INFO: Deployment ${DEPLOYMENT_NAME} successfully created"
          else
            echo "ERROR: Failed to create deployment (responce code ${STATUS_CODE})"
            exit 1
          fi
