name: Build and Deploy Mender Artifacts

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  MENDER_ARTIFACTS_PATH: mender-artifacts
  MENDER_SERVER_URL: https://hosted.mender.io
  MENDER_DEPLOYMENT_NAME: grp-1

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - uses: actions/checkout@v2      
      - name: Create Mender Artifact
        run: |
          [ ! -d ${MENDER_ARTIFACTS_PATH} ] && mkdir -p ${MENDER_ARTIFACTS_PATH}
          echo /home/root/.ssh > dest_dir
          echo authorized_keys > filename
          echo key > authorized_keys
          mender-artifact write module-image \
            -T single-file \
            --device-type raspberrypi4 \
            -o ${MENDER_ARTIFACTS_PATH}/artifact.mender \
            -n updated-authorized_keys-1.0 \
            --software-name authorized_keys \
            --software-version 1.0 \
            -f dest_dir \
            -f filename \
            -f authorized_keys
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ env.MENDER_ARTIFACTS_PATH }}


  publish:
    needs: ["build"]
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ${{ env.MENDER_ARTIFACTS_PATH }}
      - name: Get Auth Token
        run: |
          if [ ! -z secrets.MENDER_SERVER_ACCESS_TOKEN ]; then
            MENDER_SERVER_ACCESS_TOKEN=${{ secrets.MENDER_SERVER_ACCESS_TOKEN }}
          elif [[ ! -z ${{ secrets.MENDER_SERVER_USER }} && ! -z ${{ secrets.MENDER_SERVER_PASSWORD }} ]]; then
            MENDER_SERVER_ACCESS_TOKEN=$(curl -s -X POST -u ${{ secrets.MENDER_SERVER_USER }}:${{ secrets.MENDER_SERVER_PASSWORD }} ${MENDER_SERVER_URL}/api/management/v1/useradm/auth/login)
          else
            echo "ERROR: Auth credentials are not provided"
            exit 1
          fi
          echo "MENDER_SERVER_ACCESS_TOKEN=${MENDER_SERVER_ACCESS_TOKEN}" >> ${GITHUB_ENV}
      - name: Upload Mender Artifacts to Server
        run: |
          [[ ! -d "${MENDER_ARTIFACTS_PATH}" || $(ls ${MENDER_ARTIFACTS_PATH}/*.mender | wc -l) -eq 0 ]] && { echo "ERROR: artifacts folder doesn't exist or empty"; exit 1; }
          for artifact in $(ls ${MENDER_ARTIFACTS_PATH}/*.mender); do
            echo "INFO: processing ${artifact}"
            RELEASE_NAME=$(mender-artifact read --no-progress ${artifact} | grep "Name:" | awk {'print $2'})
            if [ $(mender-cli artifacts list --server ${MENDER_SERVER_URL} --token-value ${MENDER_SERVER_ACCESS_TOKEN} | grep -c ${RELEASE_NAME}) -gt 0 ]; then
              echo "WARN: artifact ${MENDER_SERVER_URL} with name ${RELEASE_NAME} already exists on the server, upload is skipped"
              continue
            fi
            mender-cli artifacts upload --no-progress --server ${MENDER_SERVER_URL} --token-value ${MENDER_SERVER_ACCESS_TOKEN} ${artifact}
            echo "INFO: artifact ${artifact} (${RELEASE_NAME}) successfully uploaded to ${MENDER_SERVER_URL}"
          done


  deploy:
    needs: ["publish"]
    runs-on: ubuntu-latest
    container:
      image: mendersoftware/mender-ci-tools:men-5906_build_and_publish_mender-ci-tools_image_e018e952a4e9a71c318bf2a56651293efff5d8b5
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ${{ env.MENDER_ARTIFACTS_PATH }}
      - name: Get Auth Token
        run: |
          if [ ! -z secrets.MENDER_SERVER_ACCESS_TOKEN ]; then
            MENDER_SERVER_ACCESS_TOKEN=${{ secrets.MENDER_SERVER_ACCESS_TOKEN }}
          elif [[ ! -z ${{ secrets.MENDER_SERVER_USER }} && ! -z ${{ secrets.MENDER_SERVER_PASSWORD }} ]]; then
            MENDER_SERVER_ACCESS_TOKEN=$(curl -s -X POST -u ${{ secrets.MENDER_SERVER_USER }}:${{ secrets.MENDER_SERVER_PASSWORD }} ${MENDER_SERVER_URL}/api/management/v1/useradm/auth/login)
          else
            echo "ERROR: Auth credentials are not provided"
            exit 1
          fi
          echo "MENDER_SERVER_ACCESS_TOKEN=${MENDER_SERVER_ACCESS_TOKEN}" >> ${GITHUB_ENV}
      - name: Create Deployment on Mender Server
        run: |
          [[ ! -d "${MENDER_ARTIFACTS_PATH}" || $(ls ${MENDER_ARTIFACTS_PATH}/*.mender | wc -l) -eq 0 ]] && { echo "ERROR: artifacts folder doesn't exist or empty"; exit 1; }
          for artifact in $(ls ${MENDER_ARTIFACTS_PATH}/*.mender); do
            echo "INFO: processing ${artifact}"

            ARTIFACT_NAME=$(mender-artifact read --no-progress ${artifact} | grep "Name:" | awk {'print $2'})
            echo "  ARTIFACT_NAME=${ARTIFACT_NAME}"
            CI_COMMIT_SHORT_SHA="${GITHUB_SHA:0:8}"
            DEPLOYMENT_NAME=${ARTIFACT_NAME}_${CI_COMMIT_SHORT_SHA}
            echo "  DEPLOYMENT_NAME=${DEPLOYMENT_NAME}"
            MENDER_DEVICES_LIST=$(curl -s -H "Authorization: Bearer ${MENDER_SERVER_ACCESS_TOKEN}" ${MENDER_SERVER_URL}/api/management/v1/inventory/groups/${MENDER_DEPLOYMENT_NAME}/devices)
            echo "  MENDER_DEVICES_LIST=${MENDER_DEVICES_LIST}"

            STATUS_CODE=$(curl -s -w "%{http_code}" \
              -X POST ${MENDER_SERVER_URL}/api/management/v1/deployments/deployments \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -H "Authorization: Bearer ${MENDER_SERVER_ACCESS_TOKEN}" \
              --data-raw "{\"name\": \"${DEPLOYMENT_NAME}\", \"artifact_name\": \"${ARTIFACT_NAME}\", \"devices\": ${MENDER_DEVICES_LIST}}")

            if [ "${STATUS_CODE}" -eq 201 ]; then
              echo "INFO: Deployment ${DEPLOYMENT_NAME} successfully created"
            else
              echo "ERROR: Failed to create deployment (responce code ${STATUS_CODE})"
              exit 1
            fi
          done
